name: Run

on:
  workflow_call:
    inputs:
      from:
        description: "from"
        required: true
        type: string
      to:
        description: "to"
        required: false
        type: string
      ignore:
        description: "ignore"
        required: false
        type: string
      script:
        description: "script"
        required: true
        type: string
    outputs:
      results:
        description: "results"
        value: ${{ jobs.merge.outputs.results }}

jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.fetch.outputs.result }}
    steps:
      - uses: actions/github-script@v6
        id: fetch
        env:
          INPUT_FROM: ${{ inputs.from }}
          INPUT_TO: ${{ inputs.to }}
          INPUT_IGNORE: ${{ inputs.ignore }}
        with:
          retries: 3
          script: |
            const from = core.getInput("from", { required: true });
            const to = core.getInput("to");
            const ignore = core.getMultilineInput("ignore");
            const response = await fetch("https://piston-meta.mojang.com/mc/game/version_manifest_v2.json");
            const manifest = await response.json();
            const versions = [];
            let include = to === "";
            for (const version of manifest.versions) {
              const id = version.id;
              if (id === to) {
                include = true;
              }
              if (include && !ignore.includes(id)) {
                versions.push(id);
              }
              if (id === from) {
                break;
              }
            }
            console.log(versions);
            return versions;
  check:
    needs: fetch
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.fetch.outputs.versions) }}
    steps:
      - uses: actions/checkout@v3
      - uses: mcenv/setup-minecraft@v3
        id: minecraft
        with:
          version: ${{ matrix.version }}
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ fromJson(steps.minecraft.outputs.package).javaVersion.majorVersion }}
      - uses: actions/github-script@v6
        id: check
        env:
          MINECRAFT: ${{ steps.minecraft.outputs.version }}
        with:
          script: ${{ inputs.script }}
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const result = ${{ steps.check.outputs.result }};
            fs.writeFileSync("result.json", JSON.stringify(result));
            return;
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.version }}
          path: result.json
          retention-days: 1
  merge:
    needs: check
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.merge.outputs.result }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: versions
      - uses: actions/github-script@v6
        id: merge
        with:
          script: |
            const fs = require("fs");
            const results = {};
            const globber = await glob.create("versions/*/result.json");
            const versions = await globber.glob();
            for (const version of versions) {
              const id = version.slice(0, -"/result.json".length).split("/").pop();
              results[id] = JSON.parse(fs.readFileSync(version));
            }
            return results;
